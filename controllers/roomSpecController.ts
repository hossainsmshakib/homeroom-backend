// controllers/roomSpecController.ts

import { Request, Response } from "express";
import {
  createRoomSpec,
  findAllRoomSpecs,
  findRoomSpecById,
  updateRoomSpec,
  deleteRoomSpec,
} from "../models/roomspectable/roomSpecTableQuery";

export interface RoomSpecAttributes {
  roomId: number;
  description: string;
  location: string;
  latitude: number;
  longitude: number;
  roomType: string;
  bathroomType: string;
  rent: number;
  pictures: string[];
  video: string | null;
  amenities: string;
  availability: string;
}

export class RoomSpecController {
  static getAllRoomSpecs(arg0: string, getAllRoomSpecs: any) {
    throw new Error("Method not implemented.");
  }
  static createRoomSpec(arg0: string, createRoomSpec: any) {
    throw new Error("Method not implemented.");
  }
  public createRoomSpec = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const {
        description,
        location,
        latitude,
        longitude,
        roomType,
        bathroomType,
        rent,
        pictures,
        video,
        amenities,
        availability,
      } = req.body;

      // Validate incoming data (ensure required fields are present)
      if (
        !description ||
        !location ||
        !latitude ||
        !longitude ||
        !roomType ||
        !bathroomType ||
        !rent ||
        !availability
      ) {
        res.status(400).json({ error: "Missing required fields" });
        return;
      }
      const newRoomSpecData: RoomSpecAttributes = {
        roomId: 0, // Auto-generated by Sequelize
        description,
        location,
        latitude,
        longitude,
        roomType,
        bathroomType,
        rent: Number(rent),
        pictures:
          pictures instanceof Array
            ? pictures.map((p) => p.path)
            : [pictures.path],
        video: video ? video.path : null,
        amenities,
        availability,
      };

      const newRoomSpec = await createRoomSpec(newRoomSpecData);
      res.status(201).json(newRoomSpec);
    } catch (error) {
      console.error("Error creating room specification:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  };

  public getRoomSpec = async (req: Request, res: Response): Promise<void> => {
    try {
      const roomId = parseInt(req.params.roomId); // Ensure roomId is parsed as an integer
      const roomSpec = await findRoomSpecById(roomId); // Call Sequelize method to find by ID

      if (roomSpec) {
        res.status(200).json(roomSpec);
      } else {
        res.status(404).json({ error: "Room spec not found" });
      }
    } catch (error) {
      console.error("Error getting room spec:", error);
      res.status(500).json({ error: "Failed to get room spec" });
    }
  };

  public updateRoomSpec = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const roomId = parseInt(req.params.id);
      const roomSpecData: Partial<RoomSpecAttributes> = req.body;
      const updatedRoomSpec = await updateRoomSpec(roomId, roomSpecData);

      if (updatedRoomSpec) {
        res.status(200).json(updatedRoomSpec);
      } else {
        res.status(404).json({ error: "Room spec not found" });
      }
    } catch (error) {
      console.error("Error updating room spec:", error);
      res.status(500).json({ error: "Failed to update room spec" });
    }
  };

  public deleteRoomSpec = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const roomId = parseInt(req.params.id);
      const deletedCount = await deleteRoomSpec(roomId);

      if (deletedCount) {
        res.status(200).json({ message: "Room spec deleted successfully" });
      } else {
        res.status(404).json({ error: "Room spec not found" });
      }
    } catch (error) {
      console.error("Error deleting room spec:", error);
      res.status(500).json({ error: "Failed to delete room spec" });
    }
  };

  public getAllRoomSpecs = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const roomSpecs = await findAllRoomSpecs();
      res.status(200).json(roomSpecs);
    } catch (error) {
      console.error("Error getting all room specs:", error);
      res.status(500).json({ error: "Failed to get room specs" });
    }
  };
}

export default new RoomSpecController();
